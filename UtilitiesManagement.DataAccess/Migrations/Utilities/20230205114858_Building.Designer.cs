// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UtilitiesManagement.DataAccess.DataContext;

#nullable disable

namespace UtilitiesManagement.DataAccess.Migrations.Utilities
{
    [DbContext(typeof(UtilitiesDbContext))]
    [Migration("20230205114858_Building")]
    partial class Building
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GharbiaUtilitiesManagement.Domain.Models.Shared.SharMainTable_Bills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ACTIVITY_TYPE")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("ACTIVITY_TYPE_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ADDRESS")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ASSIGNED_TO")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BILL_AMOUNT")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BILL_KEY")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BILL_PRINTED_DATE")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("BRANCH_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("BRANCH_NAME")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("Bill_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Block_Id")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CURRENT_READING")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CUSTOMER_NAME")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CUST_ID")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CUST_KEY")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LAST_READING")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NUMBER_OF_UNITS")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Shar_Bills_Temp");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillBillsData", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<long?>("BillIssue_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("BillNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("BillValue")
                        .HasColumnType("float");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<double>("ContenutityService")
                        .HasColumnType("float");

                    b.Property<double>("CurrentReading")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CustomerPayingDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Customer_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Installment")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Maintenance")
                        .HasColumnType("float");

                    b.Property<double>("Others")
                        .HasColumnType("float");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("PrevReading")
                        .HasColumnType("float");

                    b.Property<double>("RegularityService")
                        .HasColumnType("float");

                    b.Property<double>("Tax14Percent")
                        .HasColumnType("float");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("WastWaterInstallment")
                        .HasColumnType("float");

                    b.Property<double>("WaterInstallment")
                        .HasColumnType("float");

                    b.Property<double>("WaterValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BillIssue_Id");

                    b.HasIndex("Customer_Id");

                    b.ToTable("Bill_BillData");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillIssue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<long>("Company_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssueName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Company_Id");

                    b.ToTable("Bill_Issues");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillIssueDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("BillEndNum")
                        .HasColumnType("int");

                    b.Property<int>("BillStartNum")
                        .HasColumnType("int");

                    b.Property<string>("BranchIssueStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Branch_Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("CanPostReading")
                        .HasColumnType("bit");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("Issue_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Branch_Id");

                    b.HasIndex("Issue_Id");

                    b.ToTable("Bill_IssueDetail");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("BillPaymentSafe_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerData_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("Employee_Id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsCollected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRePrint")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BillPaymentSafe_Id");

                    b.HasIndex("CustomerData_Id");

                    b.HasIndex("Employee_Id");

                    b.ToTable("Bill_Payment");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillPaymentSafe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("BillSafe_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("HrEmployee_Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BillSafe_Id");

                    b.HasIndex("HrEmployee_Id");

                    b.ToTable("Bill_PaymentSafes");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillPaymentTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<long>("BillPayment_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("Bill_Id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BillPayment_Id");

                    b.HasIndex("Bill_Id");

                    b.ToTable("Bill_PaymentTransactions");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillPrintLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("BillPayment_Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Disc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BillPayment_Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bill_PrintLog");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillSafe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Bill_Safes");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.PayDataLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<long>("Customer_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Employee_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Customer_Id");

                    b.HasIndex("Employee_Id");

                    b.ToTable("Bill_PayDataLog");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.PayDataLogDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<long>("Bill_Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("PayDataLogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Bill_Id");

                    b.HasIndex("PayDataLogId");

                    b.ToTable("Bill_PayDataLogDetails");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Customer.CustCustomerActivity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cust_CustomerActivities");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Customer.CustCustomerData", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("ActivityStarIssue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActualActivity")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ActualName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Block_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerActivity_Id")
                        .HasColumnType("int");

                    b.Property<bool>("CustomerHasSewage")
                        .HasColumnType("bit");

                    b.Property<string>("CustomerStartIssue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CustomerStatus_Id")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDataComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MeterChassisNum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MeterDiameter")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("MeterStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeterStartIssue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MeterStartReading")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NumOfUnits")
                        .HasColumnType("int");

                    b.Property<string>("PreviousReading")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PreviousReadingIssueNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubscriptionStartDate")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Block_Id");

                    b.HasIndex("CustomerActivity_Id");

                    b.HasIndex("CustomerStatus_Id");

                    b.ToTable("Cust_CustomerData");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Customer.CustCustomerDataTemp", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("ActivityStarIssue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActualActivity")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ActualName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Block_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerActivity_Id")
                        .HasColumnType("int");

                    b.Property<bool>("CustomerHasSewage")
                        .HasColumnType("bit");

                    b.Property<string>("CustomerStartIssue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CustomerStatus_Id")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDataComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MeterChassisNum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MeterDiameter")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("MeterStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeterStartIssue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MeterStartReading")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NumOfUnits")
                        .HasColumnType("int");

                    b.Property<string>("PreviousReading")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PreviousReadingIssueNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubscriptionStartDate")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Cust_CustomerDataTemp");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Customer.CustCustomerStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cust_CustomerStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4332),
                            IsDeleted = false,
                            Name = "سارى",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4336)
                        });
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.HR.HrEmployee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("Branch_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReader")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTechnician")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("Status_Id")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Branch_Id");

                    b.HasIndex("Status_Id");

                    b.ToTable("Hr_Employees");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.HR.HrEmployee_Temp", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<long>("BranchID")
                        .HasColumnType("bigint");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Hr_Employees_Temp");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.HR.HrEmployeeBlocks", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("Block_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("Collector_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Block_Id");

                    b.HasIndex("Collector_Id");

                    b.ToTable("Hr_EmployeeBlocks");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.HR.HrStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Hr_Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4453),
                            IsDeleted = false,
                            Name = "يعمل",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4453)
                        },
                        new
                        {
                            Id = 2,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4457),
                            IsDeleted = false,
                            Name = "تمت اقالتة",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4462)
                        },
                        new
                        {
                            Id = 3,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4462),
                            IsDeleted = false,
                            Name = "أجازة",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4467)
                        },
                        new
                        {
                            Id = 4,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4467),
                            IsDeleted = false,
                            Name = "معاش",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4471)
                        },
                        new
                        {
                            Id = 5,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4471),
                            IsDeleted = false,
                            Name = "متوفى",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4471)
                        });
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Notification.NotiFcmConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAndroid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("apiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("appId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("authDomain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("measurementId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("messagingSenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("projectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("storageBucket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Noti_FcmConfig");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Notification.NotiMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserSender_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserSender_Id");

                    b.ToTable("Noti_Message");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Notification.NotiMessageUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Message_Id")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Message_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Noti_MessageUser");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Notification.NotiModules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Noti_FcmModules");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Notification.NotiUserModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Module_Id")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Module_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Noti_UserModule");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprComplaint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ComplaintDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ComplaintType_Id")
                        .HasColumnType("int");

                    b.Property<long?>("Customer_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Employee_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevised")
                        .HasColumnType("bit");

                    b.Property<long>("Issue_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("ComplaintType_Id");

                    b.HasIndex("Customer_Id");

                    b.HasIndex("Employee_Id");

                    b.HasIndex("Issue_Id");

                    b.ToTable("Opr_Complaints");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprComplaintImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<long>("Complaint_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternetSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Complaint_Id");

                    b.ToTable("Opr_ComplaintImages");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprComplaintType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAttachedImage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Opr_ComplaintTypes");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprMeterReading", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<long>("Customer_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Employee_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternetSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevised")
                        .HasColumnType("bit");

                    b.Property<long>("Issue_Details_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("MeterReadingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeterStatus_Id")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousReadingIssueNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadingImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Customer_Id");

                    b.HasIndex("Employee_Id");

                    b.HasIndex("Issue_Details_Id");

                    b.HasIndex("MeterStatus_Id");

                    b.ToTable("Opr_MeterReadings");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprMeterReadingLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MeterReadings_Id")
                        .HasColumnType("bigint");

                    b.Property<double>("NewValue")
                        .HasColumnType("float");

                    b.Property<double>("OldValue")
                        .HasColumnType("float");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeterReadings_Id");

                    b.ToTable("Opr_MeterReadings_Logs");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprMeterStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Opr_MeterStatus");

                    b.HasData(
                        new
                        {
                            Id = 15,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(3787),
                            IsDeleted = false,
                            Name = "متعذر",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(3829)
                        },
                        new
                        {
                            Id = 16,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(3838),
                            IsDeleted = false,
                            Name = "غير مقروء",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(3838)
                        },
                        new
                        {
                            Id = 17,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(3843),
                            IsDeleted = false,
                            Name = "تقديرية",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(3843)
                        },
                        new
                        {
                            Id = 18,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(3922),
                            IsDeleted = false,
                            Name = "صحيحة",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(3927)
                        });
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprUpdatedCustomer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerActivity_Id")
                        .HasColumnType("int");

                    b.Property<long>("CustomerData_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Employee_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternetSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevised")
                        .HasColumnType("bit");

                    b.Property<long>("Issue_Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("NumOfUnits")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedCustomerType_Id")
                        .HasColumnType("int");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CustomerActivity_Id");

                    b.HasIndex("CustomerData_Id");

                    b.HasIndex("Employee_Id");

                    b.HasIndex("Issue_Id");

                    b.HasIndex("UpdatedCustomerType_Id");

                    b.ToTable("Opr_UpdatedCustomers");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprUpdatedCustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SysName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Opr_UpdatedCustomerTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4397),
                            IsDeleted = false,
                            Name = "الموقع",
                            SysName = "location",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4397)
                        },
                        new
                        {
                            Id = 2,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4401),
                            IsDeleted = false,
                            Name = "النشاط",
                            SysName = "activity",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4401)
                        },
                        new
                        {
                            Id = 3,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4406),
                            IsDeleted = false,
                            Name = "عدد الوحدات",
                            SysName = "unitsnumber",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4406)
                        },
                        new
                        {
                            Id = 4,
                            InsertDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4411),
                            IsDeleted = false,
                            Name = "صورة العميل",
                            SysName = "customerimage",
                            UpdateDate = new DateTime(2023, 2, 5, 13, 48, 56, 951, DateTimeKind.Local).AddTicks(4411)
                        });
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<long>("Company_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_Admin")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_SuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Company_Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Perm_Roles", (string)null);
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HistoryDisc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsertBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Perm_RoleClaims", (string)null);
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<long>("Employee_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("InsertBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAndroid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserType_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Employee_Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserType_Id");

                    b.ToTable("Perm_Users", (string)null);
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationUserBranches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("Branch_Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Branch_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Perm_UserBranches");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Perm_UserClaims", (string)null);
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Perm_UserLogins", (string)null);
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HistoryDisc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsertBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Perm_UserRoles", (string)null);
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("Perm_UserTokens", (string)null);
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.PermMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLast")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderBy")
                        .HasColumnType("int");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Perm_Menu");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.PermOnlineUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AndroidId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Perm_OnlineUsers");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.UserTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("TimeOfToken")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Perm_UserTypes");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharArea", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("City_Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("City_Id");

                    b.ToTable("Shar_Areas");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharArea_Temp", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("City_Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Shar_Areas_Temp");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharBlock", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<long>("Area_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("BlockCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Area_Id");

                    b.ToTable("Shar_Blocks");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharBlock_Temp", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<long>("Area_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("BlockCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Shar_Blocks_Temp");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharBranch", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<long>("Company_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Company_Id");

                    b.ToTable("Shar_Branches");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharBranch_Temp", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<long>("Company_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Shar_Branches_Temp");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharCity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("CityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<long>("State_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("State_Id");

                    b.ToTable("Shar_Cities");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharCity_Temp", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("CityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<long>("State_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Shar_Cities_Temp");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(50)
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPrint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MobileUsersCount")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Shar_Company");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharState", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<long>("Branch_Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("StateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Branch_Id");

                    b.ToTable("Shar_States");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharState_Temp", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<long>("Branch_Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("StateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Shar_States_Temp");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Technician.TechTechnician", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("AttachImageEditCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("AttachImageRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCollect")
                        .HasColumnType("bit");

                    b.Property<bool>("CanComplain")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Employee_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxOfflineWorkingBills")
                        .HasColumnType("int");

                    b.Property<int>("MaxOfflineWorkingHours")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Employee_Id");

                    b.ToTable("Tech_Technicians");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Technician.TechTechnicianLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MobileDate")
                        .HasColumnType("datetime");

                    b.Property<long>("Technician_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Technician_Id");

                    b.ToTable("Tech_TechnicianLocations");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Technician.TechTechnicianWalkingLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("CompanyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("DeActiveBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Technician_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Technician_Id");

                    b.ToTable("Tech_Technician_WalkingLines");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillBillsData", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Bill.BillIssue", "BillIssue")
                        .WithMany()
                        .HasForeignKey("BillIssue_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("UtilitiesManagement.Domain.Models.Customer.CustCustomerData", "CustomerData")
                        .WithMany()
                        .HasForeignKey("Customer_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BillIssue");

                    b.Navigation("CustomerData");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillIssue", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharCompany", "Company")
                        .WithMany()
                        .HasForeignKey("Company_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillIssueDetail", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("Branch_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Bill.BillIssue", "Issue")
                        .WithMany("IssueDetails")
                        .HasForeignKey("Issue_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillPayment", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Bill.BillPaymentSafe", "billPaymentSafe")
                        .WithMany("BillPayments")
                        .HasForeignKey("BillPaymentSafe_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("UtilitiesManagement.Domain.Models.Customer.CustCustomerData", "CustomerData")
                        .WithMany()
                        .HasForeignKey("CustomerData_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.HR.HrEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("Employee_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomerData");

                    b.Navigation("Employee");

                    b.Navigation("billPaymentSafe");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillPaymentSafe", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Bill.BillSafe", "BillSafe")
                        .WithMany()
                        .HasForeignKey("BillSafe_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.HR.HrEmployee", "HrEmployee")
                        .WithMany()
                        .HasForeignKey("HrEmployee_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BillSafe");

                    b.Navigation("HrEmployee");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillPaymentTransaction", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Bill.BillPayment", "BillPayment")
                        .WithMany("Transactions")
                        .HasForeignKey("BillPayment_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Bill.BillBillsData", "Bill")
                        .WithMany()
                        .HasForeignKey("Bill_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("BillPayment");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillPrintLog", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Bill.BillPayment", "BillPayment")
                        .WithMany()
                        .HasForeignKey("BillPayment_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Permission.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BillPayment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.PayDataLog", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Customer.CustCustomerData", "CustomerData")
                        .WithMany()
                        .HasForeignKey("Customer_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.HR.HrEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("Employee_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomerData");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.PayDataLogDetails", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Bill.BillBillsData", "BillData")
                        .WithMany()
                        .HasForeignKey("Bill_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Bill.PayDataLog", null)
                        .WithMany("PayDataLogDetails")
                        .HasForeignKey("PayDataLogId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BillData");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Customer.CustCustomerData", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharBlock", "Block")
                        .WithMany()
                        .HasForeignKey("Block_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Customer.CustCustomerActivity", "CustomerActivity")
                        .WithMany()
                        .HasForeignKey("CustomerActivity_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Customer.CustCustomerStatus", "CustomerStatus")
                        .WithMany()
                        .HasForeignKey("CustomerStatus_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("CustomerActivity");

                    b.Navigation("CustomerStatus");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.HR.HrEmployee", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharBranch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("Branch_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.HR.HrStatus", "Status")
                        .WithMany()
                        .HasForeignKey("Status_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Branch");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.HR.HrEmployeeBlocks", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharBlock", "Block")
                        .WithMany("EmployeeBlocks")
                        .HasForeignKey("Block_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.HR.HrEmployee", "Employee")
                        .WithMany("EmployeeBlocks")
                        .HasForeignKey("Collector_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Notification.NotiMessage", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Permission.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserSender_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Notification.NotiMessageUser", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Notification.NotiMessage", "Message")
                        .WithMany("MessageUsers")
                        .HasForeignKey("Message_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Permission.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Notification.NotiUserModule", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Notification.NotiModules", "Module")
                        .WithMany("UserModule")
                        .HasForeignKey("Module_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("UtilitiesManagement.Domain.Models.Permission.ApplicationUser", "User")
                        .WithMany("UserModule")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprComplaint", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharBlock", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("UtilitiesManagement.Domain.Models.Operation.OprComplaintType", "ComplaintType")
                        .WithMany()
                        .HasForeignKey("ComplaintType_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Customer.CustCustomerData", "CustomerData")
                        .WithMany()
                        .HasForeignKey("Customer_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("UtilitiesManagement.Domain.Models.HR.HrEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("Employee_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Bill.BillIssue", "Issue")
                        .WithMany()
                        .HasForeignKey("Issue_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("ComplaintType");

                    b.Navigation("CustomerData");

                    b.Navigation("Employee");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprComplaintImage", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Operation.OprComplaint", "Complaint")
                        .WithMany("ComplaintImages")
                        .HasForeignKey("Complaint_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprMeterReading", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Customer.CustCustomerData", "CustomerData")
                        .WithMany()
                        .HasForeignKey("Customer_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.HR.HrEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("Employee_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Bill.BillIssueDetail", "IssueDetails")
                        .WithMany()
                        .HasForeignKey("Issue_Details_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Operation.OprMeterStatus", "MeterStatus")
                        .WithMany()
                        .HasForeignKey("MeterStatus_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomerData");

                    b.Navigation("Employee");

                    b.Navigation("IssueDetails");

                    b.Navigation("MeterStatus");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprMeterReadingLog", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Operation.OprMeterReading", "MeterReading")
                        .WithMany()
                        .HasForeignKey("MeterReadings_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MeterReading");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprUpdatedCustomer", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Customer.CustCustomerActivity", "CustomerActivity")
                        .WithMany()
                        .HasForeignKey("CustomerActivity_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("UtilitiesManagement.Domain.Models.Customer.CustCustomerData", "CustomerData")
                        .WithMany()
                        .HasForeignKey("CustomerData_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.HR.HrEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("Employee_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Bill.BillIssue", "Issue")
                        .WithMany()
                        .HasForeignKey("Issue_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Operation.OprUpdatedCustomerType", "UpdatedCustomerType")
                        .WithMany()
                        .HasForeignKey("UpdatedCustomerType_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomerActivity");

                    b.Navigation("CustomerData");

                    b.Navigation("Employee");

                    b.Navigation("Issue");

                    b.Navigation("UpdatedCustomerType");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationRole", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharCompany", "Company")
                        .WithMany()
                        .HasForeignKey("Company_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationRoleClaim", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Permission.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationUser", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.HR.HrEmployee", "Employee")
                        .WithMany("Users")
                        .HasForeignKey("Employee_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Permission.UserTypes", "UserType")
                        .WithMany()
                        .HasForeignKey("UserType_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationUserBranches", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharBranch", "Branch")
                        .WithMany("UserBranches")
                        .HasForeignKey("Branch_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Permission.ApplicationUser", "User")
                        .WithMany("AssignedBranches")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationUserClaim", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Permission.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationUserLogin", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Permission.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationUserRole", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Permission.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UtilitiesManagement.Domain.Models.Permission.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationUserToken", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Permission.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.PermOnlineUser", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Permission.ApplicationUser", "User")
                        .WithMany("UserLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.UserTypes", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharCompany", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharArea", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharCity", "City")
                        .WithMany("Areas")
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharBlock", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharArea", "Area")
                        .WithMany("Blocks")
                        .HasForeignKey("Area_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharBranch", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharCompany", "Company")
                        .WithMany("branches")
                        .HasForeignKey("Company_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharCity", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharState", "State")
                        .WithMany("Cities")
                        .HasForeignKey("State_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharState", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Shared.SharBranch", "Branch")
                        .WithMany("States")
                        .HasForeignKey("Branch_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Technician.TechTechnician", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.HR.HrEmployee", "Employee")
                        .WithMany("TechnicianLogs")
                        .HasForeignKey("Employee_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Technician.TechTechnicianLocation", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Technician.TechTechnician", "Technician")
                        .WithMany()
                        .HasForeignKey("Technician_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Technician.TechTechnicianWalkingLine", b =>
                {
                    b.HasOne("UtilitiesManagement.Domain.Models.Technician.TechTechnician", "Technician")
                        .WithMany()
                        .HasForeignKey("Technician_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillIssue", b =>
                {
                    b.Navigation("IssueDetails");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillPayment", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.BillPaymentSafe", b =>
                {
                    b.Navigation("BillPayments");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Bill.PayDataLog", b =>
                {
                    b.Navigation("PayDataLogDetails");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.HR.HrEmployee", b =>
                {
                    b.Navigation("EmployeeBlocks");

                    b.Navigation("TechnicianLogs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Notification.NotiMessage", b =>
                {
                    b.Navigation("MessageUsers");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Notification.NotiModules", b =>
                {
                    b.Navigation("UserModule");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Operation.OprComplaint", b =>
                {
                    b.Navigation("ComplaintImages");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Permission.ApplicationUser", b =>
                {
                    b.Navigation("AssignedBranches");

                    b.Navigation("UserLogs");

                    b.Navigation("UserModule");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharArea", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharBlock", b =>
                {
                    b.Navigation("EmployeeBlocks");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharBranch", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("States");

                    b.Navigation("UserBranches");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharCity", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharCompany", b =>
                {
                    b.Navigation("branches");
                });

            modelBuilder.Entity("UtilitiesManagement.Domain.Models.Shared.SharState", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
